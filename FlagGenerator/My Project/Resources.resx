<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FlagTemplate" xml:space="preserve">
    <value>Class #FlagName#
#Flags#
    Const MaxValue As Uinteger = #MaxValue#
    Public Shared ReadOnly None As New #FlagName# ("None", 0)
    Public Shared ReadOnly All As New #FlagName#("All", MaxValue)

    Private ReadOnly Value As UInteger

    Private Sub New(value As UInteger)
        Me.Value = If(value &gt; MaxValue, value And MaxValue, value)
    End Sub

    Private Sub New(name As String, value As UInteger)
        _Name = name
        Me.Value = If(value &gt; MaxValue, value And MaxValue, value)
    End Sub

    Public Shared ReadOnly Property Flags As #FlagName#() = {#FlagList#}
    Public Shared ReadOnly Property FlagNames As String() = {#StrFlagList#}
    Public Shared ReadOnly Property FlagValues As UInteger() = {#ValueList#}
    Public ReadOnly Property Name As String

    Public Property OnFlags As List(Of #FlagName#)
        Get
            Dim lstFlags As New List(Of #FlagName#)
            For Each flag In Flags
                If (Value And flag.Value) &gt; 0 Then lstFlags.Add(flag)
            Next
            Return lstFlags
        End Get
        Set()
            SetFlags(Value.ToArray())
        End Set
    End Property

    Public Property OffFlags As List(Of #FlagName#)
        Get
            Dim lstFlags As New List(Of #FlagName#)
            For Each flag In Flags
                If (Value And flag.Value) = 0 Then lstFlags.Add(flag)
            Next
            Return lstFlags
        End Get
        Set()
            UnsetFlags(Value.ToArray)
        End Set
    End Property

    Default Public ReadOnly Property IsSet(flag As #FlagName#) As Boolean
        Get
            Return (Value And flag.Value) &gt; 0
        End Get
    End Property

    Public Overrides Function ToString() As String
        Return ToString("+")
    End Function

    Public Overloads Function ToString(Separator As String) As String
        If Value = 0 Then Return None.Name
        If Value = MaxValue Then Return All.Name
        Dim sb As New Text.StringBuilder
        For Each flag In Flags
            If (Value And flag.Value) &gt; 0 Then
                If sb.Length &gt; 0 Then sb.Append(Separator)
                sb.Append(flag.Name)
            End If
        Next
        Return sb.ToString
    End Function

    Public Function ToInteger() As UInteger
        Return Value
    End Function

   Public Function SetFlag(flag As #FlagName#) As #FlagName#
        Return New #FlagName#(Value Or flag.Value)
    End Function

    Public Function SetFlags(ParamArray flags() As #FlagName#) As #FlagName#
        If flags Is Nothing OrElse flags.Length = 0 Then Return new #FlagName#(Value)

        Dim v = Value
        For Each flag In flags
            v = v Or flag.Value
        Next
        Return New #FlagName#(v)
    End Function

    Public Function SetAllExcxept(ParamArray flags() As #FlagName#) As #FlagName#
        If flags Is Nothing OrElse flags.Length = 0 Then Return new #FlagName#(Value)

        Dim v = MaxValue
        For Each flag In flags
            v -= flag.Value
        Next
        Return New #FlagName#(v)
    End Function

   Public Function UnsetFlag(flag As #FlagName#) As #FlagName#
        Return New #FlagName#(Value And Not flag.Value)
    End Function

    Public Function UnsetFlags(ParamArray flags() As #FlagName#) As #FlagName#
        If flags Is Nothing OrElse flags.Length = 0 Then Return new #FlagName#(Value)

        Dim v = Value
        For Each flag In flags
            v = v And Not flag.Value
        Next
        Return New #FlagName#(v)
    End Function

    Public Function UnsetAllExcxept(ParamArray flags() As #FlagName#) As #FlagName#
        If flags Is Nothing OrElse flags.Length = 0 Then Return new #FlagName#(Value)

        Dim v As UInteger = 0
        For Each flag In flags
            v += flag.Value
        Next
        Return New #FlagName#(v)
    End Function

   Public Function ToggleFlag(flag As #FlagName#) As #FlagName#
        Return New #FlagName#(Value Xor flag.Value)
    End Function

    Public Function ToggleFlags(ParamArray flags() As #FlagName#) As #FlagName#
        If flags Is Nothing OrElse flags.Length = 0 Then Return new #FlagName#(Value)

        Dim v = Value
        For Each flag In flags
            v = v Xor flag.Value
        Next
        Return New #FlagName#(v)
    End Function

    Public Function ToggleAllFlags() As #FlagName#
        Return New #FlagName#(Value Xor #MaxValue#)
    End Function

    Public Function AreAllSet(ParamArray flags() As #FlagName#) As Boolean
        If flags Is Nothing OrElse flags.Length = 0 Then Return Value = #MaxValue#

        For Each flag In flags
            If (Value And flag.Value) = 0 Then Return False
        Next
        Return True
    End Function

    Public Function AreAllUnset(ParamArray flags() As #FlagName#) As Boolean
        If flags Is Nothing OrElse flags.Length = 0 Then Return Value = 0

        For Each flag In flags
            If (Value And flag.Value) &lt;&gt; 0 Then Return False
        Next
        Return True
    End Function

    Public Function AreAnySet(ParamArray flags() As #FlagName#) As Boolean
        If flags Is Nothing OrElse flags.Length = 0 Then Return Value &gt; 0

        For Each flag In flags
            If (Value And flag.Value) &lt;&gt; 0 Then Return True
        Next
        Return False
    End Function

    Public Function AreAnyUnset(ParamArray flags() As #FlagName#) As Boolean
        If flags Is Nothing OrElse flags.Length = 0 Then Return Value &lt; #MaxValue#

        For Each flag In flags
            If (Value And flag.Value) = 0 Then Return True
        Next
        Return False
    End Function

#Region "Operators"

    Public Shared Widening Operator CType(value As UInteger) As #FlagName#
        Return New #FlagName#(value)
    End Operator

    Public Shared Widening Operator CType(flag As #FlagName#) As UInteger
        Return flag.Value
    End Operator


    Public Shared Operator +(flag As #FlagName#, value As Integer) As #FlagName#
        Return flag.SetFlags(new #FlagName#(value))
    End Operator

    Public Shared Operator -(flag As #FlagName#, value As Integer) As #FlagName#
        Return flag.UnsetFlags(new #FlagName#(value))
    End Operator

    Public Shared Operator Or(flag As #FlagName#, value As UInteger) As #FlagName#
        Return New #FlagName#(flag.Value Or value)
    End Operator

    Public Shared Operator And(flag As #FlagName#, value As UInteger) As #FlagName#
        Return New #FlagName#(flag.Value And value)
    End Operator

    Public Shared Operator Xor(flag As #FlagName#, value As UInteger) As #FlagName#
        Return New #FlagName#(flag.Value Xor value)
    End Operator

    Public Shared Operator Not(flag As #FlagName#) As #FlagName#
        Return New #FlagName#(Not flag.Value)
    End Operator

    Public Shared Operator IsTrue(flag As #FlagName#) As Boolean
        Return flag.Value &gt; 0
    End Operator

    Public Shared Operator IsFalse(flag As #FlagName#) As Boolean
        Return flag.Value = 0
    End Operator

    Public Shared Operator =(flag As #FlagName#, value As UInteger) As Boolean
        Return flag.Value = value
    End Operator

    Public Shared Operator &lt;&gt;(flag As #FlagName#, value As UInteger) As Boolean
        Return flag.Value &lt;&gt; value
    End Operator

    Public Shared Operator &gt;(flag As #FlagName#, value As UInteger) As Boolean
        Return flag.Value &gt; value
    End Operator

    Public Shared Operator &lt;(flag As #FlagName#, value As UInteger) As Boolean
        Return flag.Value &lt; value
    End Operator

    Public Shared Operator &gt;=(flag As #FlagName#, value As UInteger) As Boolean
        Return flag.Value &gt;= value
    End Operator

    Public Shared Operator &lt;=(flag As #FlagName#, value As UInteger) As Boolean
        Return flag.Value &lt;= value
    End Operator

    Public Shared Operator +(flag1 As #FlagName#, flag2 As #FlagName#) As #FlagName#
        Return flag1.SetFlags(flag2)
    End Operator

    Public Shared Operator -(flag1 As #FlagName#, flag2 As #FlagName#) As #FlagName#
        Return flag1.UnsetFlags(flag2)
    End Operator
    Public Shared Operator Or(flag1 As #FlagName#, flag2 As #FlagName#) As #FlagName#
        Return New #FlagName#(flag1.Value Or flag2.Value)
    End Operator

    Public Shared Operator And(flag1 As #FlagName#, flag2 As #FlagName#) As #FlagName#
        Return New #FlagName#(flag1.Value And flag2.Value)
    End Operator

    Public Shared Operator Xor(flag1 As #FlagName#, flag2 As #FlagName#) As #FlagName#
        Return New #FlagName#(flag1.Value Xor flag2.Value)
    End Operator

    Public Shared Operator =(flag1 As #FlagName#, flag2 As #FlagName#) As Boolean
        Return flag1.Value = flag2.Value
    End Operator

    Public Shared Operator &lt;&gt;(flag1 As #FlagName#, flag2 As #FlagName#) As Boolean
        Return flag1.Value &lt;&gt; flag2.Value
    End Operator

    Public Shared Operator &gt;(flag1 As #FlagName#, flag2 As #FlagName#) As Boolean
        Return flag1.Value &gt; flag2.Value
    End Operator

    Public Shared Operator &lt;(flag1 As #FlagName#, flag2 As #FlagName#) As Boolean
        Return flag1.Value &lt; flag2.Value
    End Operator

    Public Shared Operator &gt;=(flag1 As #FlagName#, flag2 As #FlagName#) As Boolean
        Return flag1.Value &gt;= flag2.Value
    End Operator

    Public Shared Operator &lt;=(flag1 As #FlagName#, flag2 As #FlagName#) As Boolean
        Return flag1.Value &lt;= flag2.Value
    End Operator
#End Region
End Class</value>
  </data>
</root>